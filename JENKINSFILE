pipeline {
    agent { label 'python'}

    stages {
        stage('Get Code') {
            steps {
                echo 'Downloading source code'
                git 'https://github.com/luisgalvan2245/helloworld.git'

                sh 'ls -la'
                echo WORKSPACE
            }
        }
        stage('Tests') {
            parallel {
                stage('Unit') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export PYTHONPATH=$WORKSPACE
                                pytest --junitxml=results-unit.xml test/unit
                            '''
                        }
                    }
                }
                stage('Rest') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export FLASK_APP=app/api.py
                                export FLASK_ENV=development

                                echo "Starting Flask app..."
                                nohup flask run > flask.log 2>&1 &

                                echo "Starting WireMock..."
                                nohup java -jar /usr/local/bin/wiremock-standalone-3.13.0.jar --port 9090 \
                                --root-dir test/wiremock > wiremock.log 2>&1 &

                                timeout 30 sh -c '
                                    while ! nc -z localhost 5000; do echo "Waiting for Flask..."; sleep 1; done
                                    while ! nc -z localhost 9090; do echo "Waiting for WireMock..."; sleep 1; done
                                '

                                pytest --junitxml=results-rest.xml test/rest
                            '''
                        }
                    }
                }
            }
        }
        stage('Results') {
            steps {
                junit 'results*.xml'
            }
        }
    }
}
