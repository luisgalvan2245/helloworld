pipeline {
    agent { label 'python' }

    stages {
        stage('Get Code') {
            steps {
                echo 'Downloading source code'
                git 'https://github.com/luisgalvan2245/helloworld.git'

                sh 'ls -la'
                echo WORKSPACE
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export PYTHONPATH=$WORKSPACE
                                coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest test/unit --junitxml=results-unit.xml
                            '''
                            junit 'results-unit.xml'
                        }
                    }
                }
                stage('Rest') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export FLASK_APP=app/api.py
                                export FLASK_ENV=development

                                echo "Starting Flask app..."
                                nohup flask run > flask.log 2>&1 &

                                echo "Starting WireMock..."
                                nohup java -jar /usr/local/bin/wiremock-standalone-3.13.0.jar --port 9090 \
                                --root-dir test/wiremock > wiremock.log 2>&1 &

                                timeout 30 sh -c '
                                    while ! nc -z localhost 5000; do echo "Waiting for Flask..."; sleep 1; done
                                    while ! nc -z localhost 9090; do echo "Waiting for WireMock..."; sleep 1; done
                                '

                                pytest --junitxml=results-rest.xml test/rest
                            '''
                            junit 'results-rest.xml'
                        }
                    }
                }


                stage('Static') {
                    steps {
                        sh '''
                            flake8 --exit-zero --format=pylint app > flake8.out
                        '''
                        recordIssues(
                            tools: [flake8(name: 'flake8', pattern: 'flake8.out')],
                            qualityGates: [
                                [threshold: 10, type: 'TOTAL', unstable: true],
                                [threshold: 12, type: 'TOTAL', unstable: false],
                            ]
                        )
                    }
                }

                stage('Security') {
                    steps {
                        sh '''
                            bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [test_id] {msg}"
                        '''
                        recordIssues(
                            tools: [pyLint(name: 'bandit', pattern: 'bandit.out')],
                            qualityGates: [
                                [threshold: 1, type: 'TOTAL', unstable: true],
                                [threshold: 2, type: 'TOTAL', unstable: false],
                            ]
                        )
                    }
                }

                stage('Performance') {
                    steps {
                        sh '''
                            jmeter -n -t test/jmeter/flask.jmx -f -l flask.jtl
                        '''
                        perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }
        }

        stage('Coverage') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                        coverage xml
                    '''
                    recordCoverage(
                        tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],
                        qualityGates: [
                            [threshold: 99.0, metric: 'LINE', baseline: 'PROJECT', criticality: 'NOTE'],
                            [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'NOTE'],
                        ]
                    )
                }
            }
        }
    }
}
